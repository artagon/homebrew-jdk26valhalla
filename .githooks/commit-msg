#!/usr/bin/env bash
# Git hook to validate conventional/semantic commit messages
# Based on https://www.conventionalcommits.org/

set -euo pipefail

commit_msg_file="$1"
commit_msg=$(cat "$commit_msg_file")

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Conventional commit pattern
# <type>(<scope>): <description>
# or
# <type>: <description>
# Allow breaking change indicator: <type>!: or <type>(<scope>)!:

# Valid types
types="feat|fix|docs|style|refactor|perf|test|chore|ci|build|revert"

# Valid scopes (optional - add your project-specific scopes)
scopes="cask|formula|workflow|docs|scripts"

# Regex pattern for conventional commits
# Matches:
# - type(scope): description
# - type: description
# - type!: description (breaking change)
# - type(scope)!: description (breaking change)
pattern="^(${types})(\\((${scopes})\\))?!?: .{1,100}"

# Allow merge commits
if echo "$commit_msg" | grep -qE "^Merge branch"; then
    exit 0
fi

# Allow revert commits
if echo "$commit_msg" | grep -qE "^Revert "; then
    exit 0
fi

# Allow fixup/squash commits (used during interactive rebase)
if echo "$commit_msg" | grep -qE "^(fixup|squash)! "; then
    exit 0
fi

# Validate first line of commit message
first_line=$(echo "$commit_msg" | head -n1)

if ! echo "$first_line" | grep -qE "$pattern"; then
    echo -e "${RED}✗ Invalid commit message format${NC}" >&2
    echo "" >&2
    echo "Commit message must follow Conventional Commits specification:" >&2
    echo "" >&2
    echo -e "${YELLOW}Format:${NC}" >&2
    echo "  <type>(<scope>): <description>" >&2
    echo "  <type>: <description>" >&2
    echo "" >&2
    echo -e "${YELLOW}Valid types:${NC}" >&2
    echo "  feat, fix, docs, style, refactor, perf, test, chore, ci, build, revert" >&2
    echo "" >&2
    echo -e "${YELLOW}Valid scopes (optional):${NC}" >&2
    echo "  cask, formula, workflow, docs, scripts" >&2
    echo "" >&2
    echo -e "${YELLOW}Examples:${NC}" >&2
    echo "  feat(cask): add support for JDK 26 EA Build 21" >&2
    echo "  fix(formula): correct SHA256 checksum for Linux ARM64" >&2
    echo "  docs: update README with installation instructions" >&2
    echo "  chore(workflow): update auto-update schedule" >&2
    echo "  feat(cask)!: breaking change with exclamation mark" >&2
    echo "" >&2
    echo -e "${YELLOW}Your commit message:${NC}" >&2
    echo "  $first_line" >&2
    echo "" >&2
    echo "See CONTRIBUTING.md for more information." >&2
    exit 1
fi

# Check description length (should be reasonable)
description=$(echo "$first_line" | sed -E "s/^(${types})(\(${scopes}\))?!?: //")
description_length=${#description}

if [ $description_length -lt 10 ]; then
    echo -e "${YELLOW}⚠ Warning: Commit description is very short ($description_length chars)${NC}" >&2
    echo "  Consider adding more detail about what changed." >&2
fi

if [ $description_length -gt 100 ]; then
    echo -e "${RED}✗ Commit description is too long ($description_length chars)${NC}" >&2
    echo "  Please keep the first line under 100 characters." >&2
    echo "  Use the commit body for additional details." >&2
    exit 1
fi

# Check if description starts with lowercase (conventional commits best practice)
if echo "$description" | grep -qE "^[a-z]"; then
    : # Good - starts with lowercase
else
    echo -e "${YELLOW}⚠ Warning: Commit description should start with lowercase${NC}" >&2
    echo "  Current: $description" >&2
    echo "  Consider: $(echo "$description" | sed 's/^\(.\)/\L\1/')" >&2
fi

# Check if description ends with period (shouldn't according to convention)
if echo "$description" | grep -qE "\.$"; then
    echo -e "${YELLOW}⚠ Warning: Commit description should not end with a period${NC}" >&2
fi

echo -e "${GREEN}✓ Commit message follows Conventional Commits format${NC}" >&2
exit 0
