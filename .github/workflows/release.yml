name: Release

on:
  push:
    branches: [main]
    paths:
      - 'Casks/jdk26valhalla.rb'
      - 'Formula/jdk26valhalla.rb'

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest
    environment:
      name: release-approval
      url: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0  # Fetch all history for changelog

      - name: Set up Homebrew
        if: runner.os == 'Linux'
        uses: Homebrew/actions/setup-homebrew@c39f0335940fb3214046dce5a5d2f94ed275ab4b

      - name: Audit cask
        run: |
          brew untap artagon/jdk26valhalla || true
          brew tap --custom-remote artagon/jdk26valhalla "$GITHUB_WORKSPACE"
          brew audit --cask artagon/jdk26valhalla/jdk26valhalla

      - name: Extract version from cask
        id: version
        run: |
          set -euo pipefail
          VERSION=$(grep -oP 'version "\K[^"]+' Casks/jdk26valhalla.rb)
          if [[ -z "$VERSION" ]]; then
            echo "Failed to extract version from Casks/jdk26valhalla.rb"
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Extract build number for changelog
          BUILD=$(echo "$VERSION" | grep -oP '\+\K\d+')
          if [[ -z "$BUILD" || ! "$BUILD" =~ ^[0-9]+$ ]]; then
            echo "Failed to extract build number from version $VERSION"
            exit 1
          fi
          echo "build=$BUILD" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        id: check_tag
        run: |
          if git rev-parse "v${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Get previous version
        if: steps.check_tag.outputs.exists == 'false'
        id: prev_version
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "tag=$PREV_TAG" >> $GITHUB_OUTPUT

          if [ -n "$PREV_TAG" ]; then
            PREV_VERSION=$(echo "$PREV_TAG" | sed 's/^v//')
            echo "version=$PREV_VERSION" >> $GITHUB_OUTPUT
          else
            echo "version=none" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        if: steps.check_tag.outputs.exists == 'false'
        id: changelog
        run: |
          PREV_TAG="${{ steps.prev_version.outputs.tag }}"

          if [ -n "$PREV_TAG" ]; then
            CHANGELOG=$(git log "${PREV_TAG}..HEAD" --pretty=format:"- %s (%h)" --no-merges)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          fi

          # Save to multiline output using delimiter
          {
            echo 'changelog<<EOF'
            echo "$CHANGELOG"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

      - name: Update README with current version
        if: steps.check_tag.outputs.exists == 'false'
        id: update_readme
        env:
          BUILD: ${{ steps.version.outputs.build }}
        run: |
          set -euo pipefail
          python3 <<'PY'
          import datetime
          import os
          import pathlib
          import re
          import sys
          import urllib.request

          build = os.environ["BUILD"]
          readme_path = pathlib.Path("README.md")

          try:
              with urllib.request.urlopen("https://jdk.java.net/26/", timeout=30) as response:
                  page = response.read().decode("utf-8", "replace")
          except Exception as exc:
              print(f"Failed to fetch release page: {exc}", file=sys.stderr)
              sys.exit(1)

          match = re.search(rf"Build {re.escape(build)} \((\d{{4}}/\d{{1,2}}/\d{{1,2}})\)", page)
          if match:
              year, month, day = match.group(1).split("/")
              release_date = f"{int(year):04d}-{int(month):02d}-{int(day):02d}"
          else:
              release_date = datetime.date.today().isoformat()

          text = readme_path.read_text()
          pattern = r"\*\*JDK 26 EA Build \d+\*\* \(Released: [0-9-]*\)"
          replacement = f"**JDK 26 EA Build {build}** (Released: {release_date})"
          new_text, count = re.subn(pattern, replacement, text, count=1)
          if count != 1:
              print("Failed to update README version banner", file=sys.stderr)
              sys.exit(1)

          changed = new_text != text
          if changed:
              readme_path.write_text(new_text)

          with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as fh:
              fh.write(f"changed={'true' if changed else 'false'}\n")
              fh.write(f"release_date={release_date}\n")
          PY

      - name: Create README update pull request
        if: steps.check_tag.outputs.exists == 'false' && steps.update_readme.outputs.changed == 'true'
        uses: peter-evans/create-pull-request@c5a7806660adbe173f04e3e038b0ccdcd758773c
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "docs: update README to JDK 26 EA Build ${{ steps.version.outputs.build }}"
          title: "docs: update README to JDK 26 EA Build ${{ steps.version.outputs.build }}"
          body: |
            This PR updates README.md to reflect JDK 26 EA Build ${{ steps.version.outputs.build }} (released ${{ steps.update_readme.outputs.release_date }}).
          branch: release/readme-${{ steps.version.outputs.build }}
          delete-branch: true

      - name: Fetch release notes from OpenJDK
        if: steps.check_tag.outputs.exists == 'false'
        id: jdk_notes
        run: |
          BUILD="${{ steps.version.outputs.build }}"

          # Try to fetch release notes (if available)
          NOTES_URL="https://jdk.java.net/26/"

          echo "notes_url=$NOTES_URL" >> $GITHUB_OUTPUT

      - name: Verify GPG signatures (if available)
        if: steps.check_tag.outputs.exists == 'false'
        id: gpg_verify
        run: |
          set -euo pipefail

          VERSION="${{ steps.version.outputs.version }}"
          echo "Checking for GPG signatures for version $VERSION..."

          # OpenJDK EA builds typically don't provide GPG signatures
          # This is a placeholder for when they become available
          # For now, we rely on SHA256 checksums embedded in the formula/cask

          echo "⚠️  GPG signatures not available for OpenJDK EA builds"
          echo "✅ Using SHA256 checksum verification via Homebrew"
          echo "verified=checksum_only" >> $GITHUB_OUTPUT

      - name: Generate SBOM
        if: steps.check_tag.outputs.exists == 'false'
        id: sbom
        run: |
          set -euo pipefail

          VERSION="${{ steps.version.outputs.version }}"
          BUILD="${{ steps.version.outputs.build }}"
          SBOM_FILE="sbom-${VERSION}.spdx.json"

          # Generate SPDX 2.3 SBOM
          cat > "$SBOM_FILE" <<EOF
          {
            "spdxVersion": "SPDX-2.3",
            "dataLicense": "CC0-1.0",
            "SPDXID": "SPDXRef-DOCUMENT",
            "name": "JDK 26 Valhalla EA Build ${BUILD}",
            "documentNamespace": "https://github.com/${{ github.repository }}/releases/tag/v${VERSION}",
            "creationInfo": {
              "created": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "creators": [
                "Tool: Artagon/homebrew-jdk26valhalla",
                "Organization: Artagon"
              ]
            },
            "packages": [
              {
                "SPDXID": "SPDXRef-Package",
                "name": "OpenJDK-26-Valhalla",
                "versionInfo": "${VERSION}",
                "supplier": "Organization: OpenJDK",
                "downloadLocation": "https://jdk.java.net/26/",
                "filesAnalyzed": false,
                "licenseConcluded": "GPL-2.0-only WITH Classpath-exception-2.0",
                "licenseDeclared": "GPL-2.0-only WITH Classpath-exception-2.0",
                "copyrightText": "Copyright (c) Oracle Corporation and/or its affiliates",
                "externalRefs": [
                  {
                    "referenceCategory": "PACKAGE-MANAGER",
                    "referenceType": "purl",
                    "referenceLocator": "pkg:generic/openjdk@${VERSION}"
                  }
                ]
              }
            ],
            "relationships": [
              {
                "spdxElementId": "SPDXRef-DOCUMENT",
                "relationshipType": "DESCRIBES",
                "relatedSpdxElement": "SPDXRef-Package"
              }
            ]
          }
          EOF

          echo "sbom_file=$SBOM_FILE" >> $GITHUB_OUTPUT
          echo "✅ Generated SBOM: $SBOM_FILE"

      - name: Create Release
        if: steps.check_tag.outputs.exists == 'false'
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: JDK 26 EA Build ${{ steps.version.outputs.build }}
          files: ${{ steps.sbom.outputs.sbom_file }}
          body: |
            # JDK 26 Early Access Build ${{ steps.version.outputs.build }}

            OpenJDK 26 Early Access build from [jdk.java.net/26](${{ steps.jdk_notes.outputs.notes_url }})

            ## Installation

            ### macOS & Linux

            ```bash
            brew tap Artagon/jdk26valhalla
            brew install --cask jdk26valhalla  # macOS only
            # or
            brew install jdk26valhalla  # macOS & Linux
            ```

            ## Supported Platforms

            - macOS ARM64 (Apple Silicon)
            - macOS x64 (Intel)
            - Linux ARM64
            - Linux x64

            ## What's Changed

            ${{ steps.prev_version.outputs.version != 'none' && format('### Changes from {0}', steps.prev_version.outputs.version) || '### Initial Release' }}

            ${{ steps.changelog.outputs.changelog }}

            ## Checksums

            All SHA256 checksums are verified automatically. See the formula/cask files for details.

            ## Links

            - [OpenJDK JDK 26 EA Downloads](https://jdk.java.net/26/)
            - [OpenJDK Project](https://openjdk.org/)

            ---

            **Note:** This is an early-access build and should not be used in production environments.
          draft: false
          prerelease: true
